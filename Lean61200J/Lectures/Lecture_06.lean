import Lean61200J.Lectures.Lecture_05
import Mathlib.Analysis.SpecialFunctions.Integrals.Basic

open Filter
open Topology

def H (n : ‚Ñï) : ‚Ñö := ‚àë i ‚àà Finset.Icc 1 n, (1 / i : ‚Ñö)

variable {Œ± Œ≤ : Type*} [Preorder Œ±] [NormedField Œ≤] in
def Tilde (f g : Œ± ‚Üí Œ≤) : Prop := Tendsto (fun x ‚Ü¶ f x / g x) atTop (ùìù 1)

theorem H_approx_ln : Tilde (fun n ‚Ü¶ (H n : ‚Ñù)) (fun x ‚Ü¶ Real.log x) := by
  have h_antitone (n : ‚Ñï) (hn : 1 ‚â§ n) : AntitoneOn (fun x : ‚Ñù => 1 / x) (Set.Icc 1 n)  := by
    intros x y hxy
    intros
    simp
    gcongr
    linarith [y.1]
  have h_left : ‚àÄ·∂† (n : ‚Ñï) in atTop, 1 / (n * Real.log n) + 1 ‚â§ H n / Real.log n := by
    rw [eventually_atTop]
    use 2
    intro n hn'
    have hn : n ‚â• 1 := by linarith
    have : 0 < Real.log n := Real.log_pos (by norm_cast)
    exact calc
      1 / (n * Real.log n) + 1
        = (1 / n + Real.log n) / (Real.log n) := by field_simp; ring
      _ = (1 / n + ‚à´ x in 1..n, 1 / x) / (Real.log n) := by
        simp
        rw [integral_inv]
        ¬∑ simp
        ¬∑ aesop
      _ ‚â§ (‚àë k ‚àà Finset.Icc 1 n, (1 / k : ‚Ñù)) / (Real.log n) := by
        bound [integral_bound_antitone hn (h_antitone n hn)]
      _ = H n / Real.log n := by simp [H]
  have h_right : ‚àÄ·∂† (n : ‚Ñï) in atTop, H n / Real.log n ‚â§ 1 + 1 / Real.log n := by
    rw [eventually_atTop]
    use 2
    intro n hn'
    have hn : n ‚â• 1 := by linarith
    have : 0 < Real.log n := Real.log_pos (by norm_cast)
    exact calc
      H n / Real.log n
        = (‚àë k ‚àà Finset.Icc 1 n, (1 / k : ‚Ñù)) / (Real.log n) := by simp [H]
      _ ‚â§ (1 + ‚à´ x in 1..n, 1 / x) / (Real.log n) := by
        bound [integral_bound_antitone hn (h_antitone n hn)]
      _ = 1 + 1 / Real.log n := by
        simp
        rw [integral_inv]
        ¬∑ field_simp
          ring
        ¬∑ aesop
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le' ?_ ?_ h_left h_right
  ¬∑ conv => enter [3, 1]; rw [‚Üê add_zero 1, add_comm]
    apply Tendsto.add_const
    have : Tendsto (fun n : ‚Ñï => n * Real.log n) atTop atTop := by
      apply Tendsto.atTop_mul_atTop‚ÇÄ
      ¬∑ exact tendsto_natCast_atTop_atTop
      ¬∑ exact Real.tendsto_log_atTop.comp tendsto_natCast_atTop_atTop
    apply tendsto_inv_atTop_zero.comp at this
    unfold Function.comp at this
    simp [*] at *
    exact this
  ¬∑ conv => enter [3, 1]; rw [‚Üê add_zero 1]
    apply Tendsto.const_add
    have := Real.tendsto_log_atTop.comp tendsto_natCast_atTop_atTop
    apply tendsto_inv_atTop_zero.comp at this
    unfold Function.comp at this
    simp [*] at *

/- TODO: Move this into separate file -/

def PReal := { x : ‚Ñù // 0 < x }
notation "‚Ñù+" => PReal

@[coe]
def PReal.val : ‚Ñù+ ‚Üí ‚Ñù := Subtype.val

instance coePRealReal : Coe ‚Ñù+ ‚Ñù :=
  ‚ü®PReal.val‚ü©

@[simp]
theorem PReal.pos (x : ‚Ñù+) : 0 < (x : ‚Ñù) :=
  x.2

@[simp]
theorem PReal.ne_zero (x : ‚Ñù+) : (x : ‚Ñù) ‚â† 0 :=
  x.2.ne'

@[simp]
theorem PReal.zero_le (x : ‚Ñù+) : (0 : ‚Ñù) ‚â§ x :=
  le_of_lt x.pos

def O (g : ‚Ñï+ ‚Üí ‚Ñù+) : Set (‚Ñï+ ‚Üí ‚Ñù) :=
  { f : ‚Ñï+ ‚Üí ‚Ñù | ‚àÉ c : ‚Ñù, ‚àÄ·∂† x in atTop, |f x| ‚â§ c * g x }

theorem limit_O {f : ‚Ñï+ ‚Üí ‚Ñù} {g : ‚Ñï+ ‚Üí ‚Ñù+}
    (h_ex_lim : ‚àÉ l : ‚Ñù, Tendsto (fun x ‚Ü¶ |f x| / g x) atTop (ùìù l)) :
    f ‚àà O g := by
  obtain ‚ü®l, h_lim‚ü© := h_ex_lim
  use l + 1
  rw [Metric.tendsto_atTop] at h_lim
  specialize h_lim 1 (by simp)
  obtain ‚ü®M, hM‚ü© := h_lim
  rw [eventually_atTop]
  refine ‚ü®M, fun x hx ‚Ü¶ ?_‚ü©
  specialize hM x hx
  rw [Real.dist_eq, abs_sub_lt_iff] at hM
  replace hM : |f x| / g x < l + 1 := by linarith
  exact calc
    |f x|
      = |f x| / g x * g x := by field_simp
    _ ‚â§ (l + 1) * g x := by bound
